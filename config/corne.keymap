/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2

/ {
        macros {
                fkey: fkey {
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp Z &kp M &kp K>
                                ;
                };
        };

        combos {
                compatible = "zmk,combos";
                combo_esc {
                        timeout-ms = <50>; //time to activate bindings
                        key-positions = <0 1>; //triggers
                        bindings = <&kp ESC>; //resolutions
                };
                ext_power_on {
                        timeout-ms = <100>; //time to activate bindings
                        key-positions = <4 5 38>; //triggers
                        bindings = <&ext_power EP_ON>; //resolutions
                };
                ext_power_off {
                        timeout-ms = <100>; //time to activate bindings
                        key-positions = <16 17 38>; //triggers
                        bindings = <&ext_power EP_OFF>; //resolutions
                };
                ext_power_on_right {
                        timeout-ms = <100>; //time to activate bindings
                        key-positions = <6 7 39>; //triggers
                        bindings = <&ext_power EP_ON>; //resolutions
                };
                ext_power_off_right {
                        timeout-ms = <100>; //time to activate bindings
                        key-positions = <18 19 39>; //triggers
                        bindings = <&ext_power EP_OFF>; //resolutions
                };
        };

        behaviors {
                klht: key_layer_hold_tap {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>; //keys 
                        flavor = "tap-unless-interrupted"; //only hold when tap another
                        tapping-term-ms = <1000>; //hold time
                        quick-tap-ms = <150>; //tap&hold quick to use tap kp
                        require-prior-idle-ms = <100>; //tap if last tap is <125
                        bindings = <&mo>, <&kp>; //momentary layer and key
                };
                bht: behavior_hold_tap {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>; //keys 
                        flavor = "tap-preferred"; //only hold when tap another
                        tapping-term-ms = <300>; //hold time
                        quick-tap-ms = <150>; //tap&hold quick to use tap kp
                        // require-prior-idle-ms = <100>; //tap if last tap is <125
                        bindings = <&kp>, <&kp>; // hold and tap
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB 0 |  Q 1  |  W 2  |  E 3  |  R 4  |  T 5  |   |  Y 6  |  U 7   |  I 8  |  O 9  |  P 10  | BKSP 11 |
// | CAPS 12 |  A 13  |  S 14  |  D 15  |  F 16  |  G 17  |   |  H 18  |  J 19   |  K 20  |  L 21  |  ; 22  |  ' 23   |
// | SHFT 24 |  Z 25 |  X 26  |  C 27  |  V 28  |  B 29  |   |  N 30  |  M 31   |  , 32  |  . 33  |  / 34  | ESC 35  |
//                    | LALT 36 | LWR SPC 37 | SPC 38 |   | ENT 39 | RSE 40  | ALT 41 |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &bht SQT ENTER
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp QMARK
                  &kp LALT &klht LOWER SPACE &kp LCTRL   &bht RCTRL HOME &klht RAISE SPACE &kp END
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  UP  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| LEFT | DOWN | RIGHT | FKEY | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT | BT SEL 0  | BT SEL 1 |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB &kp N1 &kp UP &kp N3 &kp N4 &kp N5         &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp BSPC
   &bt BT_CLR &kp LEFT &kp DOWN &kp RIGHT &fkey &trans   &trans &kp N4 &kp N5 &kp N6 &trans &trans
   &kp LSHFT &bt BT_SEL 0 &bt BT_SEL 1 &ext_power EP_OFF &ext_power EP_ON &ext_power EP_TOG    &trans &kp N1 &kp N2 &kp N3 &trans &trans
                      &kp LGUI &trans &kp LCTRL      &bht RCTRL HOME &kp SPACE &kp N0
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };
        };
};
